/* -LICENSE-START-
** Copyright (c) 2013 Blackmagic Design
**  
** Permission is hereby granted, free of charge, to any person or organization 
** obtaining a copy of the software and accompanying documentation (the 
** "Software") to use, reproduce, display, distribute, sub-license, execute, 
** and transmit the Software, and to prepare derivative works of the Software, 
** and to permit third-parties to whom the Software is furnished to do so, in 
** accordance with:
** 
** (1) if the Software is obtained from Blackmagic Design, the End User License 
** Agreement for the Software Development Kit (“EULA”) available at 
** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
** 
** (2) if the Software is obtained from any third party, such licensing terms 
** as notified by that third party,
** 
** and all subject to the following:
** 
** (3) the copyright notices in the Software and this entire statement, 
** including the above license grant, this restriction and the following 
** disclaimer, must be included in all copies of the Software, in whole or in 
** part, and all derivative works of the Software, unless such copies or 
** derivative works are solely in the form of machine-executable object code 
** generated by a source language processor.
** 
** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
** DEALINGS IN THE SOFTWARE.
** 
** A copy of the Software is available free of charge at 
** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
** 
** -LICENSE-END-
*/

#ifndef __CAPTURE_H__
#define __CAPTURE_H__

#include <DeckLinkAPI.h>
#include <ros/ros.h>
#include <opencv2/opencv.hpp>
#include <cv_bridge/cv_bridge.h>
#include <image_transport/image_transport.h>
#include <robot_control/ImgShowMsg.h>
#include <rosilo_datalogger/AddValueMsg.h>
#include <std_msgs/String.h>
#include <std_msgs/Bool.h>

class DeckLinkCaptureDelegate : public IDeckLinkInputCallback
{
public:
    DeckLinkCaptureDelegate(ros::NodeHandle& nodehandle);

	virtual HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, LPVOID *ppv) { return E_NOINTERFACE; }
	virtual ULONG STDMETHODCALLTYPE AddRef(void);
	virtual ULONG STDMETHODCALLTYPE  Release(void);
	virtual HRESULT STDMETHODCALLTYPE VideoInputFormatChanged(BMDVideoInputFormatChangedEvents, IDeckLinkDisplayMode*, BMDDetectedVideoInputFormatFlags);
    virtual HRESULT STDMETHODCALLTYPE VideoInputFrameArrived(IDeckLinkVideoInputFrame*, IDeckLinkAudioInputPacket*);

    image_transport::ImageTransport image_transport_;
    ros::Publisher publisher_ROI_frame;
    image_transport::Publisher publisher_overview_frame;
    ros::Subscriber subscriber_roi_parameter;
    ros::Subscriber subscriber_tip_positions;
    ros::Subscriber subscriber_predicted_distances;
    ros::Subscriber subscriber_contact_reporter;
    ros::Subscriber subscriber_positioning_points;
    ros::Subscriber subscriber_planar_error;
    ros::Subscriber subscriber_current_step;

    void _get_ROI_parameter(const robot_control::ImgShowMsg::ConstPtr& msg);
    void _get_predicted_distances(const robot_control::ImgShowMsg::ConstPtr& msg);
    void _get_tip_positions(const rosilo_datalogger::AddValueMsg::ConstPtr& msg);
    void _get_contact_reporter(const std_msgs::Bool::ConstPtr& msg);
    void _get_positioning_points(const rosilo_datalogger::AddValueMsg::ConstPtr& msg);
    void _get_planar_error(const rosilo_datalogger::AddValueMsg::ConstPtr& msg);
    void _get_current_step(const std_msgs::String::ConstPtr& msg);

    int image_width = -1; //Initially we don't know
    int image_height = -1; //Initially we don't know

    double original_w = 3840;
    double original_h = 2160;

    double windowsize_w = 1920;
    double windowsize_h = 1080;

    double display_ratio = windowsize_w/original_w;

    int key;

    bool contact = false;

    int ROI_center[2] = {3840/2, 2060/2};
    int instrument_tip[2] = {3840/2, 2060/2};
    int instrument_tip_overall[2] = {3840/2, 2060/2};
    int shadow_tip[2] = {3840/2, 2060/2};
    int shaft_point[2] = {3840/2, 2060/2};
    int left_top[2];
    int right_bottom[2];
    int ROI_half_size = 768/2;
    int point_1[2] = {3840/2, 2060/2};
    int point_2[2] = {3840/2, 2060/2};
    int point_3[2] = {3840/2, 2060/2};
    int point_4[2] = {3840/2, 2060/2};
    int point_5[2] = {3840/2, 2060/2};
    int radii_1 = 1;
    int radii_2 = 1;
    int radii_3 = 1;
    int radii_4 = 1;
    int radii_5 = 1;

    std::string current_step = "Waiting";

    int planar_error = 0;
    int tip_dis = 0;
    int shaft_dis = 0;

    double predict_size = 256;
    double output_size = 256;

    cv::Mat cv_image_yuv;
    cv::Mat cv_image_bgr;

    cv::Rect ROI_region;
    cv::Rect ROI_display_region = cv::Rect(windowsize_w-predict_size-2,windowsize_h-predict_size-2,predict_size,predict_size);

    cv::Mat cv_image_ROI;
    cv::Mat cv_image_ROI_resized;

    cv::Mat cv_image_show;

    cv::Mat cv_image_overview_resized;

private:
	int32_t				m_refCount;
	BMDPixelFormat		m_pixelFormat;
};

#endif
