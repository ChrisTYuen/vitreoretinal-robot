// Generated by gencpp from file rosilo_datalogger/AddValueMsg.msg
// DO NOT EDIT!


#ifndef ROSILO_DATALOGGER_MESSAGE_ADDVALUEMSG_H
#define ROSILO_DATALOGGER_MESSAGE_ADDVALUEMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosilo_datalogger
{
template <class ContainerAllocator>
struct AddValueMsg_
{
  typedef AddValueMsg_<ContainerAllocator> Type;

  AddValueMsg_()
    : name()
    , value()
    , strvalue()  {
    }
  AddValueMsg_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , value(_alloc)
    , strvalue(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _value_type;
  _value_type value;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _strvalue_type;
  _strvalue_type strvalue;





  typedef boost::shared_ptr< ::rosilo_datalogger::AddValueMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosilo_datalogger::AddValueMsg_<ContainerAllocator> const> ConstPtr;

}; // struct AddValueMsg_

typedef ::rosilo_datalogger::AddValueMsg_<std::allocator<void> > AddValueMsg;

typedef boost::shared_ptr< ::rosilo_datalogger::AddValueMsg > AddValueMsgPtr;
typedef boost::shared_ptr< ::rosilo_datalogger::AddValueMsg const> AddValueMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosilo_datalogger::AddValueMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosilo_datalogger::AddValueMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosilo_datalogger::AddValueMsg_<ContainerAllocator1> & lhs, const ::rosilo_datalogger::AddValueMsg_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.value == rhs.value &&
    lhs.strvalue == rhs.strvalue;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosilo_datalogger::AddValueMsg_<ContainerAllocator1> & lhs, const ::rosilo_datalogger::AddValueMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosilo_datalogger

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rosilo_datalogger::AddValueMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosilo_datalogger::AddValueMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosilo_datalogger::AddValueMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosilo_datalogger::AddValueMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosilo_datalogger::AddValueMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosilo_datalogger::AddValueMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosilo_datalogger::AddValueMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d17a07a93f3e7d7722ef08216d8e72f9";
  }

  static const char* value(const ::rosilo_datalogger::AddValueMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd17a07a93f3e7d77ULL;
  static const uint64_t static_value2 = 0x22ef08216d8e72f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosilo_datalogger::AddValueMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosilo_datalogger/AddValueMsg";
  }

  static const char* value(const ::rosilo_datalogger::AddValueMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosilo_datalogger::AddValueMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"float64[] value\n"
"string strvalue\n"
;
  }

  static const char* value(const ::rosilo_datalogger::AddValueMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosilo_datalogger::AddValueMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.value);
      stream.next(m.strvalue);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AddValueMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosilo_datalogger::AddValueMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosilo_datalogger::AddValueMsg_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "value[]" << std::endl;
    for (size_t i = 0; i < v.value.size(); ++i)
    {
      s << indent << "  value[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.value[i]);
    }
    s << indent << "strvalue: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.strvalue);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSILO_DATALOGGER_MESSAGE_ADDVALUEMSG_H
