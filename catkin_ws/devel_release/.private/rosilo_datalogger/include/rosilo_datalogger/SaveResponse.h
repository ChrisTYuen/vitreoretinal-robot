// Generated by gencpp from file rosilo_datalogger/SaveResponse.msg
// DO NOT EDIT!


#ifndef ROSILO_DATALOGGER_MESSAGE_SAVERESPONSE_H
#define ROSILO_DATALOGGER_MESSAGE_SAVERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosilo_datalogger
{
template <class ContainerAllocator>
struct SaveResponse_
{
  typedef SaveResponse_<ContainerAllocator> Type;

  SaveResponse_()
    : worked(false)  {
    }
  SaveResponse_(const ContainerAllocator& _alloc)
    : worked(false)  {
  (void)_alloc;
    }



   typedef uint8_t _worked_type;
  _worked_type worked;





  typedef boost::shared_ptr< ::rosilo_datalogger::SaveResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosilo_datalogger::SaveResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SaveResponse_

typedef ::rosilo_datalogger::SaveResponse_<std::allocator<void> > SaveResponse;

typedef boost::shared_ptr< ::rosilo_datalogger::SaveResponse > SaveResponsePtr;
typedef boost::shared_ptr< ::rosilo_datalogger::SaveResponse const> SaveResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosilo_datalogger::SaveResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosilo_datalogger::SaveResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosilo_datalogger::SaveResponse_<ContainerAllocator1> & lhs, const ::rosilo_datalogger::SaveResponse_<ContainerAllocator2> & rhs)
{
  return lhs.worked == rhs.worked;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosilo_datalogger::SaveResponse_<ContainerAllocator1> & lhs, const ::rosilo_datalogger::SaveResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosilo_datalogger

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rosilo_datalogger::SaveResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosilo_datalogger::SaveResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosilo_datalogger::SaveResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosilo_datalogger::SaveResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosilo_datalogger::SaveResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosilo_datalogger::SaveResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosilo_datalogger::SaveResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e9488d8ea76faf703564dab31aa285e5";
  }

  static const char* value(const ::rosilo_datalogger::SaveResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe9488d8ea76faf70ULL;
  static const uint64_t static_value2 = 0x3564dab31aa285e5ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosilo_datalogger::SaveResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosilo_datalogger/SaveResponse";
  }

  static const char* value(const ::rosilo_datalogger::SaveResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosilo_datalogger::SaveResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool worked\n"
"\n"
;
  }

  static const char* value(const ::rosilo_datalogger::SaveResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosilo_datalogger::SaveResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.worked);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SaveResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosilo_datalogger::SaveResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosilo_datalogger::SaveResponse_<ContainerAllocator>& v)
  {
    s << indent << "worked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.worked);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSILO_DATALOGGER_MESSAGE_SAVERESPONSE_H
