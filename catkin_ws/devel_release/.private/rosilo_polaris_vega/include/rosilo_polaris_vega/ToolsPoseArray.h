// Generated by gencpp from file rosilo_polaris_vega/ToolsPoseArray.msg
// DO NOT EDIT!


#ifndef ROSILO_POLARIS_VEGA_MESSAGE_TOOLSPOSEARRAY_H
#define ROSILO_POLARIS_VEGA_MESSAGE_TOOLSPOSEARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>

namespace rosilo_polaris_vega
{
template <class ContainerAllocator>
struct ToolsPoseArray_
{
  typedef ToolsPoseArray_<ContainerAllocator> Type;

  ToolsPoseArray_()
    : header()
    , frame_numbers()
    , port_handles()
    , statuses()
    , poses()  {
    }
  ToolsPoseArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , frame_numbers(_alloc)
    , port_handles(_alloc)
    , statuses(_alloc)
    , poses(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<int64_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int64_t>> _frame_numbers_type;
  _frame_numbers_type frame_numbers;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _port_handles_type;
  _port_handles_type port_handles;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _statuses_type;
  _statuses_type statuses;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Pose_<ContainerAllocator> >> _poses_type;
  _poses_type poses;





  typedef boost::shared_ptr< ::rosilo_polaris_vega::ToolsPoseArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosilo_polaris_vega::ToolsPoseArray_<ContainerAllocator> const> ConstPtr;

}; // struct ToolsPoseArray_

typedef ::rosilo_polaris_vega::ToolsPoseArray_<std::allocator<void> > ToolsPoseArray;

typedef boost::shared_ptr< ::rosilo_polaris_vega::ToolsPoseArray > ToolsPoseArrayPtr;
typedef boost::shared_ptr< ::rosilo_polaris_vega::ToolsPoseArray const> ToolsPoseArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosilo_polaris_vega::ToolsPoseArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosilo_polaris_vega::ToolsPoseArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosilo_polaris_vega::ToolsPoseArray_<ContainerAllocator1> & lhs, const ::rosilo_polaris_vega::ToolsPoseArray_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.frame_numbers == rhs.frame_numbers &&
    lhs.port_handles == rhs.port_handles &&
    lhs.statuses == rhs.statuses &&
    lhs.poses == rhs.poses;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosilo_polaris_vega::ToolsPoseArray_<ContainerAllocator1> & lhs, const ::rosilo_polaris_vega::ToolsPoseArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosilo_polaris_vega

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rosilo_polaris_vega::ToolsPoseArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosilo_polaris_vega::ToolsPoseArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosilo_polaris_vega::ToolsPoseArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosilo_polaris_vega::ToolsPoseArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosilo_polaris_vega::ToolsPoseArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosilo_polaris_vega::ToolsPoseArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosilo_polaris_vega::ToolsPoseArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "297b84503018526d42525e774a191c54";
  }

  static const char* value(const ::rosilo_polaris_vega::ToolsPoseArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x297b84503018526dULL;
  static const uint64_t static_value2 = 0x42525e774a191c54ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosilo_polaris_vega::ToolsPoseArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosilo_polaris_vega/ToolsPoseArray";
  }

  static const char* value(const ::rosilo_polaris_vega::ToolsPoseArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosilo_polaris_vega::ToolsPoseArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int64[] frame_numbers\n"
"int32[] port_handles\n"
"int32[] statuses\n"
"geometry_msgs/Pose[] poses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::rosilo_polaris_vega::ToolsPoseArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosilo_polaris_vega::ToolsPoseArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.frame_numbers);
      stream.next(m.port_handles);
      stream.next(m.statuses);
      stream.next(m.poses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ToolsPoseArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosilo_polaris_vega::ToolsPoseArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosilo_polaris_vega::ToolsPoseArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "frame_numbers[]" << std::endl;
    for (size_t i = 0; i < v.frame_numbers.size(); ++i)
    {
      s << indent << "  frame_numbers[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.frame_numbers[i]);
    }
    s << indent << "port_handles[]" << std::endl;
    for (size_t i = 0; i < v.port_handles.size(); ++i)
    {
      s << indent << "  port_handles[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.port_handles[i]);
    }
    s << indent << "statuses[]" << std::endl;
    for (size_t i = 0; i < v.statuses.size(); ++i)
    {
      s << indent << "  statuses[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.statuses[i]);
    }
    s << indent << "poses[]" << std::endl;
    for (size_t i = 0; i < v.poses.size(); ++i)
    {
      s << indent << "  poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.poses[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSILO_POLARIS_VEGA_MESSAGE_TOOLSPOSEARRAY_H
